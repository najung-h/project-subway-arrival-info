name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  PROJECT_DIR: subwaylive

jobs:
  # 1Ô∏è‚É£ Build & Push
  build-and-push:
    runs-on: ubuntu-latest
    name: Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú

    steps:
      - name: üì¶ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: ü™µ Debug Tree (Check project structure)
        run: |
          echo "üìç ÌòÑÏû¨ Í≤ΩÎ°ú ÏúÑÏπò:"
          pwd
          echo "---------------------------"
          echo "üìÇ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞"
          ls -al
          echo "---------------------------"
          echo "üìÅ ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ (${PROJECT_DIR})"
          ls -al "${PROJECT_DIR}" || echo "‚ö†Ô∏è ${PROJECT_DIR} Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
          echo "---------------------------"
          echo "‚úÖ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ ÏôÑÎ£å!"

          
      - name: üß© QEMU ÏÑ§Ï†ï (Î©ÄÌã∞ ÏïÑÌÇ§ÌÖçÏ≤ò ÏßÄÏõê)
        uses: docker/setup-qemu-action@v3

      - name: ‚öôÔ∏è Buildx ÏÑ§Ï†ï
        uses: docker/setup-buildx-action@v3

      - name: üîê Docker Hub Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üè∑Ô∏è Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            # ‚úÖ Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú Ïì∞Îäî Í∑∏ÎåÄÎ°úÏùò ÏÉùSHA ÌÉúÍ∑∏ÎèÑ Ìï®Íªò Ìë∏Ïãú
            type=raw,value=${{ github.sha }}
            # (ÏÑ†ÌÉù) Í∏∞Ï°¥ sha- Ï†ëÎëêÏÇ¨ ÌÉúÍ∑∏ÎèÑ Ïú†ÏßÄÌïòÍ≥† Ïã∂Îã§Î©¥ Ï∂îÍ∞Ä
            # type=sha


      - name: üèóÔ∏è Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.PROJECT_DIR }} 
          file: ./${{ env.PROJECT_DIR }}/docker/web.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 2Ô∏è‚É£ Deploy
  deploy:
    runs-on: ubuntu-latest
    name: EC2Ïóê Î∞∞Ìè¨
    needs: build-and-push

    steps:
      - name: üì¶ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: üîê Create env.prod locally (safe)
        run: |
          cat > .env.prod << 'EOF'
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_DEBUG=False
          DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
          SITE_DOMAIN=${{ secrets.SITE_DOMAIN }}

          SEOUL_SUBWAY_API_KEY=${{ secrets.SEOUL_SUBWAY_API_KEY }}

          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

          # RDS(MySQL)
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}

          # Ìò∏Ìôò ÌÇ§ (settings ÎÑ§Ïù¥Î∞ç ÌòºÏÑ† ÎåÄÎπÑ)
          DB_NAME=${{ secrets.MYSQL_DATABASE }}
          DB_USER=${{ secrets.MYSQL_USER }}
          DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DB=${{ secrets.MYSQL_DATABASE }}
          MYSQL_HOST=${{ secrets.DB_HOST }}
          MYSQL_PORT=${{ secrets.DB_PORT }}

          # prodÏóêÏÑú .env ÏûêÎèô Î°úÎî© Í∏àÏßÄ (django-environ ÏÇ¨Ïö© Ïãú)
          READ_DOT_ENV_FILE=False
          EOF
      - name: üì§ env.prodÎ•º EC2Ïóê ÏóÖÎ°úÎìúÌïòÍ∏∞
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ".env.prod"                         # ‚Üê ÌååÏùº
          target: "${{ secrets.APP_DIR }}/subwaylive" # ‚Üê ÎîîÎ†âÌÜ†Î¶¨
          overwrite: true

      - name: üöÄ SSH Ï†ëÏÜç ÌõÑ Î∞∞Ìè¨
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            set -Eeuo pipefail
            export DEBIAN_FRONTEND=noninteractive

            # ‚úÖ 0) Í≤ΩÎ°ú/Ïù¥ÎØ∏ÏßÄ Î≥ÄÏàò "Î®ºÏ†Ä" Ï†ïÏùò
            APP_DIR=${{ secrets.APP_DIR }}
            PROJECT_DIR=subwaylive
            COMPOSE_DIR="$APP_DIR/$PROJECT_DIR/docker"
            COMPOSE_FILE="$COMPOSE_DIR/compose.prod.yml"
            IMAGE=${{ env.REGISTRY }}/${{ secrets.IMAGE_NAME }}
            SHA_TAG=${{ github.sha }}

            echo "whoami: $(whoami)"
            echo "APP_DIR: ${APP_DIR}"
            test -n "${APP_DIR}" || { echo "APP_DIR ÎπÑÏñ¥ÏûàÏùå"; exit 2; }

            # 1) Docker/Compose ÏÑ§Ïπò Ï†êÍ≤Ä (+git)
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi
            if ! command -v git >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y git
            fi

            # 2) Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨
            sudo mkdir -p "$APP_DIR"
            sudo chown -R "$USER:$USER" "$APP_DIR"

            # 3) Î†àÌè¨ÏßÄÌÜ†Î¶¨ ÏµúÏã†Ìôî
            if [ -d "$APP_DIR/.git" ]; then
              git -C "$APP_DIR" fetch --all --prune
              git -C "$APP_DIR" reset --hard origin/${{ github.ref_name }}
            else
              # ‚ö†Ô∏è Îπà ÎîîÎ†âÌÜ†Î¶¨Îßå Ï†ïÎ¶¨ (ÏóÖÎ°úÎìúÎêú .env.prod Î≥¥Ìò∏)
              if [ -d "$APP_DIR" ] && [ -z "$(ls -A "$APP_DIR" 2>/dev/null)" ]; then
                true  # ÎπÑÏñ¥ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú
              fi
              git clone --depth=1 https://github.com/${{ github.repository }} "$APP_DIR"
            fi

            # ‚úÖ 4) .env.prod Ï°¥Ïû¨/Í∂åÌïú ÌôïÏù∏ (Ïù¥Ï†ú Í≤ΩÎ°úÍ∞Ä Ïú†Ìö®)
            if [ ! -f "$APP_DIR/$PROJECT_DIR/.env.prod" ]; then
              echo "[ERROR] $APP_DIR/$PROJECT_DIR/.env.prod Ïù¥ ÏóÜÏäµÎãàÎã§. (scp Îã®Í≥Ñ ÌôïÏù∏)"
              ls -al "$APP_DIR/$PROJECT_DIR" || true
              exit 3
            fi
            chmod 600 "$APP_DIR/$PROJECT_DIR/.env.prod"
            sed -i 's/\r$//' "$APP_DIR/$PROJECT_DIR/.env.prod"
            echo "[env.prod head]"
            head -n 20 "$APP_DIR/$PROJECT_DIR/.env.prod" | sed 's/=.*/=<hidden>/' || true

            # ‚úÖ 5) Ïù¥Ï†ú ÏïàÏ†ÑÌïòÍ≤å Î°úÎìú(set -aÎäî .env ÎÇ¥ Î≥ÄÏàòÎì§ÏùÑ export)
            set -a
            . "$APP_DIR/$PROJECT_DIR/.env.prod"
            set +a

            # ‚úÖ Ìè¨Ìä∏ Í∏∞Î≥∏Í∞í Î≥¥Ïû• (DB_PORT ‚Üí MYSQL_PORT ‚Üí 3306)
            DB_HOST="${DB_HOST:-${MYSQL_HOST:-}}"
            DB_PORT="${DB_PORT:-${MYSQL_PORT:-3306}}"
            MYSQL_DATABASE="${MYSQL_DATABASE:-${DB_NAME:-${MYSQL_DB:-}}}"

            export DB_HOST DB_PORT MYSQL_DATABASE


            # (ÏÑ†ÌÉù) RDS Admin ÏûêÍ≤©ÎèÑ Ïó¨Í∏∞ÏÑú export
            export RDS_ADMIN_USER='${{ secrets.RDS_ADMIN_USER }}'
            export RDS_ADMIN_PASSWORD='${{ secrets.RDS_ADMIN_PASSWORD }}'

            # 6) Ïù¥ÎØ∏ÏßÄ Pull
            sudo docker pull "$IMAGE:$SHA_TAG" || sudo docker pull "$IMAGE:latest"

            # 7) compose Ï†ÑÏö© env ÌååÏùº ÏÉùÏÑ± (.deploy.env)
            mkdir -p "$COMPOSE_DIR"
            DEPLOY_ENV="$COMPOSE_DIR/.deploy.env"
            echo "APP_IMAGE=$IMAGE:$SHA_TAG" | sudo tee "$DEPLOY_ENV" > /dev/null
            echo "[debug] .deploy.env:" && cat "$DEPLOY_ENV"

            # 7.5) Ensure Database exists
            echo "[ensure-db] creating database if not exists..."
            sudo -E docker run --rm \
              -e DB_HOST="$DB_HOST" \
              -e DB_PORT="$DB_PORT" \
              -e RDS_ADMIN_USER="$RDS_ADMIN_USER" \
              -e RDS_ADMIN_PASSWORD="$RDS_ADMIN_PASSWORD" \
              -e MYSQL_DATABASE="$MYSQL_DATABASE" \
              mysql:8.0 \
              sh -lc '
                set -e
                : "${DB_HOST:?missing DB_HOST}"
                : "${DB_PORT:?missing DB_PORT}"
                : "${RDS_ADMIN_USER:?missing RDS_ADMIN_USER}"
                : "${RDS_ADMIN_PASSWORD:?missing RDS_ADMIN_PASSWORD}"
                : "${MYSQL_DATABASE:?missing MYSQL_DATABASE}"
                echo "[ensure-db] host=$DB_HOST port=$DB_PORT db=$MYSQL_DATABASE"
                mysql -h "$DB_HOST" -P "$DB_PORT" -u "$RDS_ADMIN_USER" -p"$RDS_ADMIN_PASSWORD" \
                  -e "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
              ' || { echo "[ensure-db] failed to ensure database exists"; exit 4; }
            echo "[ensure-db] done."

            # 8) (ÏÑ†Ïã§Ìñâ) migrate / collectstatic / apply_socialapp
            cd "$COMPOSE_DIR"

            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" run --rm web \
              sh -lc 'python manage.py migrate --settings=config.settings.prod'
            
            # ‚úÖ collectstaticÏùÑ root Í∂åÌïúÏúºÎ°ú Ïã§ÌñâÌïòÏó¨ Í∂åÌïú Î¨∏Ï†ú Ìï¥Í≤∞
            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" run --rm --user root web \
              sh -lc 'python manage.py collectstatic --noinput --settings=config.settings.prod'
            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" run --rm web \
              sh -lc 'python manage.py apply_socialapp --settings=config.settings.prod' || echo "[warn] apply_socialapp failed, continuing..."

            # 9) ÏÑúÎπÑÏä§ Í∏∞Îèô
            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" up -d --remove-orphans

            # 10) ÏÉÅÌÉú/Î°úÍ∑∏
            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" ps
            sudo docker compose --env-file "$DEPLOY_ENV" -f "$COMPOSE_FILE" logs --tail=60 web || true

            # 11) Ïù¥ÎØ∏ÏßÄ Ï≤≠ÏÜå
            sudo docker image prune -af || true

            echo "‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å"
