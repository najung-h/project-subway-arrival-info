name: CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  PROJECT_DIR: subwaylive

jobs:
  # 1Ô∏è‚É£ Build & Push
  build-and-push:
    runs-on: ubuntu-latest
    name: Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú

    steps:
      - name: üì¶ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: ü™µ Debug Tree (Check project structure)
        run: |
          echo "üìç ÌòÑÏû¨ Í≤ΩÎ°ú ÏúÑÏπò:"
          pwd
          echo "---------------------------"
          echo "üìÇ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞"
          ls -al
          echo "---------------------------"
          echo "üìÅ ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ (${PROJECT_DIR})"
          ls -al "${PROJECT_DIR}" || echo "‚ö†Ô∏è ${PROJECT_DIR} Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
          echo "---------------------------"
          echo "‚úÖ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ ÏôÑÎ£å!"

          
      - name: üß© QEMU ÏÑ§Ï†ï (Î©ÄÌã∞ ÏïÑÌÇ§ÌÖçÏ≤ò ÏßÄÏõê)
        uses: docker/setup-qemu-action@v3

      - name: ‚öôÔ∏è Buildx ÏÑ§Ï†ï
        uses: docker/setup-buildx-action@v3

      - name: üîê Docker Hub Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üè∑Ô∏è Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: üèóÔ∏è Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.PROJECT_DIR }} 
          file: ./${{ env.PROJECT_DIR }}/docker/web.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 2Ô∏è‚É£ Deploy
  deploy:
    runs-on: ubuntu-latest
    name: EC2Ïóê Î∞∞Ìè¨
    needs: build-and-push

    steps:
      - name: üì¶ ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: üöÄ SSH Ï†ëÏÜç ÌõÑ Î∞∞Ìè¨
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            set -Eeuo pipefail

            APP_DIR=${{ secrets.APP_DIR }}
            PROJECT_DIR=subwaylive
            COMPOSE_DIR="$APP_DIR/$PROJECT_DIR/docker"
            COMPOSE_FILE="$COMPOSE_DIR/compose.prod.yml"
            IMAGE=${{ env.REGISTRY }}/${{ secrets.IMAGE_NAME }}
            SHA_TAG=${{ github.sha }}

            echo "üì¶ [0] Docker/Compose Ï†êÍ≤Ä Î∞è ÏÑ§Ïπò"
            if ! command -v docker >/dev/null 2>&1; then
              echo "‚Üí Docker ÎØ∏ÏÑ§Ïπò: ÏÑ§Ïπò ÏßÑÌñâ (Ubuntu)"
              # Í≥µÏãù Docker Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Îì±Î°ù
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" \
                | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              sudo apt-get update -y
              # docker engine + compose v2 ÌîåÎü¨Í∑∏Ïù∏ ÏÑ§Ïπò
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

              # ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê(Ïòà: ubuntu)Î•º docker Í∑∏Î£πÏóê Ï∂îÍ∞Ä (ÏÑ†ÌÉù)
              sudo usermod -aG docker $USER || true
              # ÎπÑÎåÄÌôîÏãù ÏÑ∏ÏÖòÏóêÏÑúÎäî Í∑∏Î£π Ïû¨Ï†ÅÏö©Ïù¥ Ïïà ÎêòÎØÄÎ°ú, ÏïÑÎûòÏóêÏÑúÎäî Í≥ÑÏÜç sudo ÏÇ¨Ïö©
            fi

            echo "üìÅ [1] Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ: $APP_DIR"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R "$USER":"$USER" "$APP_DIR"

            echo "üåÄ [2] Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ ÏµúÏã†Ìôî"
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone --depth=1 https://github.com/${{ github.repository }} "$APP_DIR"
            else
              cd "$APP_DIR"
              git fetch --all --prune
              git reset --hard origin/${{ github.ref_name }}
            fi
            cd "$APP_DIR"

            echo "üîê [3] .env ÏÉùÏÑ± ‚Üí $APP_DIR/$PROJECT_DIR/.env"
            cat > "$APP_DIR/$PROJECT_DIR/.env" << 'EOF'
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DJANGO_DEBUG=False
            DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
            SEOUL_SUBWAY_API_KEY=${{ secrets.SEOUL_SUBWAY_API_KEY }}

            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            SITE_DOMAIN=${{ secrets.SITE_DOMAIN }}

            # RDS(MySQL)
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            EOF

            echo "üê≥ [4] ÏµúÏã† Ïù¥ÎØ∏ÏßÄ Pull"
            sudo docker pull "$IMAGE:$SHA_TAG" || sudo docker pull "$IMAGE:latest"

            echo "üß© [5] compose ÌååÏùº Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏπòÌôò"
            tmpfile=$(mktemp)
            sed "s|\(image: \).*|\1$IMAGE:$SHA_TAG|g" "$COMPOSE_FILE" > "$tmpfile"
            mv "$tmpfile" "$COMPOSE_FILE"

            echo "üöÄ [6] Docker Compose Î∞∞Ìè¨"
            cd "$COMPOSE_DIR"
            # compose v2: 'docker compose'
            sudo docker compose -f "$COMPOSE_FILE" up -d --remove-orphans

            echo "üõ†Ô∏è [7] Django migrate / collectstatic / apply_socialapp"
            sudo docker compose -f "$COMPOSE_FILE" exec -T web \
              python manage.py migrate --settings=config.settings.prod
            sudo docker compose -f "$COMPOSE_FILE" exec -T web \
              python manage.py collectstatic --noinput --settings=config.settings.prod
            sudo docker compose -f "$COMPOSE_FILE" exec -T web \
              python manage.py apply_socialapp --settings=config.settings.prod

            echo "üßπ [8] Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨"
            sudo docker image prune -af || true

            echo "‚úÖ ÏôÑÎ£å"
